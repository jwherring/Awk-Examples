#!/bin/bash

TODAY=`date +%F`
numregexp='^[0-9]+$'
passfailregexp='[pP]ass|PASS|^[pP]$'
passcount=0

print_usage(){
cat <<INSTRUCTIONS
genpuzzlelist {limit} {offset}

limit - a number of puzzles (must be a number)
offset - how many items to skip (must be a number or "rand")

If offset is "rand," genpuzzlelist goes into interactive mode, displaying one link at a time and prompting for a result of retrying the puzzle for each, which is saved in the database.
INSTRUCTIONS

exit 1
}

show_results() {
  cat chessproblems.md
}

get_code() {
  CD=`printf "%s" $1 | awk -F/ '{print $6}' - `
}

save_result() {
  RS="fail"
  if [[ $2 =~ $passfailregexp ]]; then
    RS="pass"
    passcount=$(($passcount+1))
  fi
  echo $RS
  sqlite3 chessproblems.sqlite <<RES
    insert into exercises(date,code,result) values ('$TODAY',$1,'$RS')
RES
}

show_result_stats(){
  printf "PASS: %d FAIL: %d TOTAL: %d RATE: %.2f\n" $passcount $(($1-$passcount)) $1 `echo "scale=2; $passcount / $1" | bc`
}

show_interactive_results() {
  readarray -t LINKS < chessproblems.md
  for problem_link in ${LINKS[@]}; do
    echo $problem_link
    get_code $problem_link
    echo "CODE: $CD"
    echo "INPUT RESULT(P/F):"
    read result
    save_result $CD $result
  done
  show_result_stats $1
}

shuffle_problems(){
  shuf chessproblems.md > tmp.md
  mv tmp.md chessproblems.md
}

remove_previous_file(){
  if [ -f chessproblems.md ]; then 
    rm chessproblems.md
  fi
}

cut_file() {
  head -n $1 chessproblems.md > tmp.md
  mv tmp.md chessproblems.md
}

get_limited_list() {
  remove_previous_file
	PUZZLES=(`sqlite3 chessproblems.sqlite <<PZS
		select code from chessproblems where is_passed='false' order by rowid desc limit $1 offset $2
PZS
`)
  for puzzle in ${PUZZLES[@]}; do
    echo -e "https://www.chess.com/puzzles/problem/$puzzle/practice" >> chessproblems.md
  done
  shuffle_problems
  show_results
}

get_random_list() {
  remove_previous_file
	PUZZLES=(`sqlite3 chessproblems.sqlite <<PZS
		select code from chessproblems where is_passed='false' order by rowid desc 
PZS
`)
  for puzzle in ${PUZZLES[@]}; do
    echo -e "https://www.chess.com/puzzles/problem/$puzzle/practice" >> chessproblems.md
  done
  shuffle_problems
  cut_file $1
  show_interactive_results $1
}

get_list() {
  if ! [[ $1 =~ $numregexp ]]; then
    print_usage
  elif [[ $2 == "rand" ]]; then
    get_random_list $1
  elif ! [[ $2 =~ $numregexp ]]; then
    print_usage
  else
    get_limited_list $1 $2
  fi
}

get_all() {
  remove_previous_file
	PUZZLES=(`sqlite3 chessproblems.sqlite <<PZS
		select code from chessproblems where is_passed='false' order by rowid desc 
PZS
`)
  for puzzle in ${PUZZLES[@]}; do
    echo -e "https://www.chess.com/puzzles/problem/$puzzle/practice" >> chessproblems.md
  done
  shuffle_problems
  show_results
}

if [ $# -eq 0 ]; then
  get_all
  exit 0
elif [ $# -ne 2 ]; then
	print_usage
else
  get_list $1 $2
  exit 0
fi
